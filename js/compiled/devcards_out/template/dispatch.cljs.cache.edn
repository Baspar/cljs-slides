;; Analyzed by ClojureScript 1.8.51
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros, deftest devcards.core, defcard devcards.core}, :excludes #{}, :name template.dispatch, :imports nil, :requires {sab sablono.core, sablono.core sablono.core, str clojure.string, clojure.string clojure.string, cljs.core.async cljs.core.async}, :uses {<! cljs.core.async, chan cljs.core.async, put! cljs.core.async}, :defs {pipe {:name template.dispatch/pipe, :file "src/diapo/dispatch.cljs", :line 10, :column 1, :end-line 10, :end-column 14, :meta {:file "/home/baspar/Stage/diapo/src/diapo/dispatch.cljs", :line 10, :column 10, :end-line 10, :end-column 14}}, empty-or-nil? {:protocol-inline nil, :meta {:file "/home/baspar/Stage/diapo/src/diapo/dispatch.cljs", :line 12, :column 7, :end-line 12, :end-column 20, :arglists (quote ([s]))}, :name template.dispatch/empty-or-nil?, :variadic false, :file "src/diapo/dispatch.cljs", :end-column 20, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, process-events {:protocol-inline nil, :meta {:file "/home/baspar/Stage/diapo/src/diapo/dispatch.cljs", :line 15, :column 7, :end-line 15, :end-column 21, :arglists (quote ([channel]))}, :name template.dispatch/process-events, :variadic false, :file "src/diapo/dispatch.cljs", :end-column 21, :method-params ([channel]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([channel]))}, emit {:protocol-inline nil, :meta {:file "/home/baspar/Stage/diapo/src/diapo/dispatch.cljs", :line 23, :column 7, :end-line 23, :end-column 11, :arglists (quote ([native-event state] [native-event state sender message-type value])), :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([native-event state] [native-event state sender message-type value]), :arglists ([native-event state] [native-event state sender message-type value]), :arglists-meta (nil nil)}}, :name template.dispatch/emit, :variadic false, :file "src/diapo/dispatch.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([native-event state] [native-event state sender message-type value]), :arglists ([native-event state] [native-event state sender message-type value]), :arglists-meta (nil nil)}, :method-params ([native-event state] [native-event state sender message-type value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 5, :fn-var true, :arglists ([native-event state] [native-event state sender message-type value])}}, :require-macros {dc devcards.core, devcards.core devcards.core, cljs.core.async.macros cljs.core.async.macros, sab sablono.core, sablono.core sablono.core}, :cljs.analyzer/constants {:seen #{:else :recur}, :order [:recur :else]}, :doc nil}