;; Analyzed by ClojureScript 1.8.51
{:use-macros nil, :excludes #{}, :name template.core, :imports nil, :requires {template.state template.state, template.ui template.ui, cljs.core.async cljs.core.async, template.dispatch template.dispatch, sablono.core sablono.core, sab sablono.core, state template.state, dispatch template.dispatch, ui template.ui, str clojure.string, clojure.string clojure.string, app template.cards.app, template.cards.app template.cards.app}, :uses {<! cljs.core.async, chan cljs.core.async, put! cljs.core.async}, :defs {render-app {:protocol-inline nil, :meta {:file "/home/baspar/Stage/diapo/src/template/core.cljs", :line 13, :column 7, :end-line 13, :end-column 17, :arglists (quote ([dom-node]))}, :name template.core/render-app, :variadic false, :file "src/template/core.cljs", :end-column 17, :method-params ([dom-node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([dom-node]))}, main {:protocol-inline nil, :meta {:file "/home/baspar/Stage/diapo/src/template/core.cljs", :line 19, :column 7, :end-line 19, :end-column 11, :arglists (quote ([]))}, :name template.core/main, :variadic false, :file "src/template/core.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {sab sablono.core, sablono.core sablono.core}, :cljs.analyzer/constants {:seen #{:render :anim :cpt}, :order [:render :cpt :anim]}, :doc nil}